name: Deploy to AWS ECS

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Docker
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "nishantg98" --password-stdin

    - name: Build & Push Docker Image
      run: |
        docker build -t nishantg98/simple-time-service -f app/Dockerfile app
        docker tag nishantg98/simple-time-service nishantg98/simple-time-service:latest
        docker push nishantg98/simple-time-service:latest

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
    
    - name: Setup Terraform Backend (S3 + DynamoDB)
      run: |
            #!/bin/bash
            
            # Variables
            AWS_REGION="us-east-1"
            S3_BUCKET_NAME="simple-time-service-tf-state"  # Change to a globally unique name
            DYNAMODB_TABLE_NAME="terraform-locks"

            echo "üöÄ Setting up Terraform Remote State Backend..."

            # Step 1: Create S3 Bucket for Terraform State Storage
            echo "üìå Creating S3 bucket: $S3_BUCKET_NAME..."
            aws s3api create-bucket --bucket "$S3_BUCKET_NAME" --region "$AWS_REGION" --create-bucket-configuration LocationConstraint="$AWS_REGION" || echo "Bucket may already exist."

            # Step 2: Enable Versioning on the S3 Bucket
            echo "üîÑ Enabling versioning on $S3_BUCKET_NAME..."
            aws s3api put-bucket-versioning --bucket "$S3_BUCKET_NAME" --versioning-configuration Status=Enabled

            # Step 3: Create a DynamoDB Table for State Locking
            echo "üîí Creating DynamoDB table: $DYNAMODB_TABLE_NAME..."
            aws dynamodb create-table \
                --table-name "$DYNAMODB_TABLE_NAME" \
                --attribute-definitions AttributeName=LockID,AttributeType=S \
                --key-schema AttributeName=LockID,KeyType=HASH \
                --billing-mode PAY_PER_REQUEST || echo "Table may already exist."

            # Step 4: Configure Terraform Backend (Update `terraform/backend.tf`)
            echo "üèóÔ∏è Configuring Terraform Backend..."
            cat <<EOF > terraform/backend.tf
            terraform {
              backend "s3" {
                bucket         = "$S3_BUCKET_NAME"
                key            = "terraform.tfstate"
                region         = "$AWS_REGION"
                encrypt        = true
                dynamodb_table = "$DYNAMODB_TABLE_NAME"
              }
            }
            EOF

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Terraform Plan
      run: terraform plan
      working-directory: terraform
    
    # - name: Terraform Apply
    #   run: terraform apply -auto-approve
    #   working-directory: terraform

